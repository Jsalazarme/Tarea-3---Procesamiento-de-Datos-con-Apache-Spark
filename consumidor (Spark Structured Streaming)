#!/usr/bin/env python3
"""
spark_streaming_consumer.py
Lee el topic 'sensor_data' de Kafka, parsea JSON y calcula promedios
por ventana de 1 minuto por sensor.
Ejecutar con: spark-submit --packages org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.3 spark_streaming_consumer.py
"""

from pyspark.sql import SparkSession
from pyspark.sql.functions import from_json, col, window
from pyspark.sql.types import StructType, StructField, IntegerType, FloatType, TimestampType, StringType

# Crear SparkSession
spark = SparkSession.builder \
    .appName("KafkaSparkStreaming") \
    .getOrCreate()

spark.sparkContext.setLogLevel("WARN")

# Definir el esquema del JSON (timestamp como String o Timestamp)
schema = StructType([
    StructField("sensor_id", IntegerType(), True),
    StructField("temperature", FloatType(), True),
    StructField("humidity", FloatType(), True),
    StructField("timestamp", StringType(), True)  # será parseado más abajo si hace falta
])

# Leer stream desde Kafka
df = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", "localhost:9092") \
    .option("subscribe", "sensor_data") \
    .option("startingOffsets", "earliest") \
    .load()

# value viene en bytes -> casteamos a string, parseamos JSON y extraemos campos
parsed_df = df.select(from_json(col("value").cast("string"), schema).alias("data")).select("data.*")

# Convertir timestamp string a tipo timestamp si es necesario
# Si tu timestamp ya está en formato compatible, puedes convertirlo:
from pyspark.sql.functions import to_timestamp
parsed_df = parsed_df.withColumn("timestamp", to_timestamp(col("timestamp"), "yyyy-MM-dd'T'HH:mm:ss"))

# Agrupar por ventana de 1 minuto y sensor_id para calcular promedios
windowed_stats = parsed_df \
    .groupBy(window(col("timestamp"), "1 minute"), col("sensor_id")) \
    .agg({"temperature": "avg", "humidity": "avg"}) \
    .select(
        col("window").start.alias("window_start"),
        col("window").end.alias("window_end"),
        col("sensor_id"),
        col("avg(temperature)").alias("avg_temperature"),
        col("avg(humidity)").alias("avg_humidity")
    ).orderBy("window_start", "sensor_id")

# Escribir resultados en consola (modo complete para ver toda la tabla por batch)
query = windowed_stats \
    .writeStream \
    .outputMode("complete") \
    .format("console") \
    .option("truncate", False) \
    .start()

query.awaitTermination()
